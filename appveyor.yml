environment:
  matrix:
  - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x86/0.6/julia-0.6-latest-win32.exe"
  - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x64/0.6/julia-0.6-latest-win64.exe"
  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x86/julia-latest-win32.exe"
  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"

## uncomment the following lines to allow failures on nightly julia
## (tests will run but not make your overall status red)
matrix:
  allow_failures:
  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x86/julia-latest-win32.exe"
  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"

branches:
  only:
    - master
    - /release-.*/

notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false

install:
  - ps: "[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12"
# If there's a newer build queued for the same PR, cancel this one
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }
# Download most recent Julia Windows binary
  - ps: (new-object net.webclient).DownloadFile(
        $env:JULIA_URL,
        "C:\projects\julia-binary.exe")
# Run installer silently, output to C:\projects\julia
  - C:\projects\julia-binary.exe /S /D=C:\projects\julia

build_script:
# Need to convert from shallow to complete for Pkg.clone to work
  - IF EXIST .git\shallow (git fetch --unshallow)
  - C:\projects\julia\bin\julia -e "VERSION < v\"0.7.0-DEV\" || (using InteractiveUtils);
      versioninfo(); pkg = \"Strs\"; mit = \"ModuleInterfaceTools\"; mh3 = \"MurmurHash3\";
      loc = \"https://github.com/JuliaString\";
      la = (\"StrTables\", \"LightXML\", \"JSON\", \"Format\", \"PCRE2\", \"InternedStrings\", \"StrAPI\", \"CharSetEncodings\", \"ChrBase\");
      lc = (\"StrBase\", \"StrRegex\", \"StrLiterals\", \"StrFormat\", \"StrEntities\");
      if VERSION < v\"0.7.0-DEV.5183\";
         cln = Pkg.clone;
         cln(\"$loc/$mit.jl.git\", mit);
         cln(\"$loc/$mh3.jl.git\", mh3);
         for n in la; Pkg.add(n); end;
         for n in (\"LaTeX\",\"Emoji\",\"HTML\",\"Unicode\");
             d=n*\"_Entities\" ; Pkg.add(d); Pkg.build(d);
         end;
         Pkg.build(\"PCRE2\");
         for n in lc; cln(\"$loc/$n.jl.git\", n); end;
         cln(pwd(), pkg);
     else;
         using Pkg;
         cln(a,b) = Pkg.add(a);
         cln(\"$loc/$mit.jl.git\", mit);
         cln(\"$loc/$mh3.jl.git\", mh3);
         Pkg.build(\"PCRE2\");
         for n in lc; cln(\"$loc/$n.jl.git\", n); end;
     end"

test_script:
  - C:\projects\julia\bin\julia -e "Pkg.test(\"Strs\")"
